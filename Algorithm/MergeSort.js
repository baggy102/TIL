// 합병 정렬

// 합병 정렬은 분할 정복 알고리즘에 속한다. (폰 노이만)
// 분할 정복이란 ㅇ어떤 문제를 그대로 해결할 수 없을 때, 작은 문제로 분할해서 푸는 방법을 말한다.
// 합병 정렬은 배열을 두개로 나누고, 나눈 것을 다시 두 개로 계속 나눠 정렬한다.

// 정렬이 안 된 배열과 그 결과를 저장할 빈 배열이 있다고 하자.

// [2, 4, 5, 7, 1, 3, 6, 8], [결과배열]
// 배열을 반으로 쪼갠다.

// [2, 4, 5, 7], [1, 3, 6, 8], []
// 두 배열의 제일 앞 수를 비교해 작은 숫자를 결과 배열에 넣어줍니다.

// [2, 4, 5, 7], [3, 6, 8], [1]
// [4, 5, 7], [3, 6, 8]
// [4, 5, 7], [6, 8], [1,2,3]
// [5, 7], [6, 8], [1, 2, 3, 4]
// ...
// [], [], [1, 2, 3, 4, 5, 6, 7, 8]

// 만약 [5, 2, 4, 7, 6, 1, 3, 8] 이라면?
// 이 경우 위와 같이 정렬한 결과는 [5, 2, 4, 6, 1, 3, 7, 8]이 된다.

// 재귀와 분할 정복
// 위 경우는 한 번에 해결할 수 없기 때문에 작은 문제로 쪼개서 생각한다.
// 작은 문제로 쪼개는 것 -> 재귀를 사용한다.
// 즉, 위의 [5, 2, 4, 7]과 [6, 1, 3, 8]에 다시 합병 정렬을 실행시켜주는 것
// [5, 2, 4, 7]은 [5, 2], [4, 7]로, [6, 1, 3, 8]은 [6, 1]과 [3, 8]로 나누어 정렬을 실행합니다.
// 하지만 [5, 2], [6, 1]은 정렬이 안 된 상태이다.
// 그래서 [5, 2]도 [5]와 [2]로 나누어 실행해준다.
// [5],[2]는 정렬하면 [2, 5]가 되고, [4, 7]은 그대로, [6],[1]은 [1, 6]으로, [3, 8]은 그대로 정렬된다.
// 이제 최소 단위로는 다 정렬되었으니 [2, 5], [4, 7]을 정렬하고, [1, 6], [3, 8]을 정렬하면 된다.
// 결국 [5, 2, 4, 7]과 [6, 1, 3, 8]이 각각 [2, 4, 5, 7], [1, 3, 6, 8]로 바뀜.
// 이걸 아까처럼 최종적으로 정렬한다.

// 이렇게 반복적으로 쪼개서 마지막에 합치는 것을 합병 정렬이라 한다.
// 배열 원소의 개수가 홀수인 경우. 반으로 쪼개서 앞 두 수끼리 비교.

// 코드로 작성해보면 크게 재귀를 하는 부분(mergeSort)과, 앞의 두 수끼리 비교(merge)하는 부분으로 나뉜다.

let mergeSort = (array) => {
  if (array.length < 2) return array; // 원소가 하나일 때는 그대로 내보낸다.
  let pivot = Math.floor(array.length / 2); // 반으로 쪼개는 코드
  let left = array.slice(0, pivot); // 쪼갠 왼쪽
  let right = array.slice(pivot, array.length); // 쪼갠 오른쪽
  return merge(mergeSort(left), mergeSort(right)); // 재귀적으로 쪼개고 합칩니다.
};
function merge(left, right) {
  let result = [];
  while (left.length && right.length) {
    if (left[0] <= right[0]) {
      // 두 배열의 첫 원소를 비교하여
      result.push(left.shift()); // 더 작은 수를 결과에 넣어줍니다.
    } else {
      result.push(right.shift()); // 오른쪽도 마찬가지
    }
  }
  while (left.length) result.push(left.shift()); // 어느 한 배열이 더 많이 남았다면 나머지를 다 넣어줍니다.
  while (right.length) result.push(right.shift()); // 오른쪽도 마찬가지
  return result;
}

mergeSort([5, 2, 4, 7, 6, 1, 3, 8]); // [1, 2, 3, 4, 5, 6, 7, 8]

console.log(mergeSort([5, 2, 4, 7, 6, 1, 3, 8]));
