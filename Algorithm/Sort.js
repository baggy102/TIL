// 알고리즘은 주로 탐색과 정렬을 담당하는 것이 많다.
// 탐색을 위해서는 미리 정렬하는 것이 필요하다.

// 삽입 정렬 (insertion Sort)
// 여러 개의 섞인 숫자가 존재할 때, 작은 순서부터 큰 순서로 정렬하는 것
// 삽입정렬은 첫 숫자는 놔두고, 두 번째 자리 숫자부터 뽑아서 그 숫자가
// 첫 숫자보다 크면 첫 숫자 오른쪽에, 작으면 왼쪽에 넣는다.
// 세 번째 자리 숫자를 뽑아서 앞의 두 숫자와 비교해 알맞은 자리에 배치한다.
// 위 과정을 끝까지 반복한다.

// 1부터 6까지의 순서가 정렬되지 않은 숫자가 존재할 때
let insertionSort = function (array) {
  let i = 1,
    j,
    temp;
  for (i; i < array.length; i++) {
    temp = array[i]; // 새로운 숫자를 선택함
    for (j = i - 1; j >= 0 && temp < array[j]; j--) {
      // 선택한 숫자를 이미 정렬된 숫자들과 비교하며 넣을 위치를 찾는 과정, 선택한 숫자가 정렬된 숫자보다 작으면
      array[j + 1] = array[j]; // 한 칸씩 뒤로 밀어낸다
    }
    array[j + 1] = temp; // 마지막 빈 칸에 선택한 숫자를 넣어준다.
  }
  return array;
};

insertionSort([5, 6, 1, 2, 4, 3]);
console.log(insertionSort([5, 6, 1, 2, 4, 3]));

// 위에서 크게 두 과정을 반복하고 있음. 숫자를 선택한 후 알맞은 위치에 넣습니다.
// 정렬된 숫자들 중 큰 숫자부터 비교하면서 선택한 숫자가 정렬된 숫자보다 클 때까지 반복하고,
// 커지면 그 사이에 집어넣습니다. 즉, 선택한 숫자보다 큰 숫자들은 오른쪽으로 한 칸씩 밀어내고
// 빈 자리에 선택한 숫자를 넣는다.

// 삽입 정렬은 성능이 뛰어난 정렬은 아니며 작은 수에서만 효과적인 경우가 많습니다. (복잡도가 높다)
// But. 간단, 이미 정렬되어 있는 배열에 새로운 원소를 집어넣어 다시 정렬할 때는 매우 효과적이다.
// 새 원소를 처음부터 한번씩만 기존의 원소들과 비교하면 됨.
