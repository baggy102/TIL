// 버블 정렬

// 정렬하는 모습이 거품이 꺼지는 모습과 비슷하하다.
// 실제 흩어져있는 데이터들이 서로 바뀌면서 일렬로 정렬
// 버블 정렬은 O(n^2)으로 성능이 안 좋은 정렬 중에서도 가장 안 좋은 정렬에 속함

// Ex.
// [5,1,7,4,6,3,2,8] 처음 두 수를 비교해서 순서대로 숫자를 서로 바꿔준다.
// [1,5,7,4,6,3,2,8] 5와 7은 이미 정렬되어 있으니까 그대로 놔둠.
// [1,5,7,4,6,3,2,8] 7과 4는 서로 바꿔준다.
// [1,5,4,7,6,3,2,8]
// [1,5,4,6,7,3,2,8]
// [1,5,4,6,3,7,2,8]
// [1,5,4,6,3,2,7,8] 끝까지 정렬을 했으면 다시 처음부터 비교.
// [1,5,4,6,3,2,7,8]
// [1,4,5,6,3,2,7,8] 5,6은 넘어가고 6,3 순서를 바꿔준다.
// [1,4,5,3,6,2,7,8]
// [1,4,5,3,2,6,7,8] 다시 처음부터 비교.
// [1,4,3,5,2,6,7,8]
// [1,4,3,2,5,6,7,8] 다시 처음부터 비교.
// [1,3,4,2,5,6,7,8]
// [1,3,2,4,5,6,7,8] 다시 처음부터
// [1,2,3,4,5,6,7,8] 정렬 끝

// 이처럼 한 과정에 두 수의 위치를 서로 바꾸는 작업밖에 못해 성능이 좋지 않음.
// 하지만 간단한 작업

let bubbleSort = function (array) {
  let length = array.length;
  let i, j, temp;
  for (i = 0; i < length - 1; i++) {
    // 순차적으로 비교하기 위한 반복문
    for (j = 0; j < length - 1 - i; j++) {
      // 끝까지 돌았을 때 다시 처음부터 비교하기 위한 반복문
      if (array[j] > array[j + 1]) {
        // 두 수를 비교하여 앞 수가 뒷 수보다 크면
        temp = array[j]; // 두 수를 서로 바꿔준다
        array[j] = array[j + 1];
        array[j + 1] = temp;
      }
    }
  }
  return array;
};

console.log(bubbleSort([5, 1, 7, 4, 6, 3, 2, 8])); // [1,2,3,4,5,6,7,8]
