# Python 자료형

''' 파이썬의 자료형으로는 정수형, 실수형, 복소수형, 문자열, 리스트, 튜플, 사전 등이 있다.
	파이썬의 자료형은 필수적으로 알아두어야한다.


정수형
정수형(Integer)은 정수를 다루는 자료형이다.
	양의 정수, 음의 정수, 0이 포함된다.
코딩 테스트에서 출제되는 많은 문제들은 정수형을 주로 다룬다.
'''

# 양의 정수
a= 1000
print(a)

# 음의 정수
a = -7
print(a)

# 0 
a = 0
print(a)


# 실수형
'''
실수형(Real Number)은 소수점 아래의 데이터를 포함하는 수 자료형이다.
 - 파이썬에서는 변수에 소수점을 붙인 수를 대입하면 실수형 변수로 처리된다.
 - 소수부가 0이거나, 정수부가 0인 소수는 0을 생략하고 작성할 수 있다.
'''

# 지수 표현 방식
'''
파이썬에서는 e나 E를 이용해 지수 표혆 방식을 이용할 수 있다.
e나 E 다음에 오는 수는 10의 지수부를 의미한다.
이러한 지수 표현 방식은 실수 형태로 표현된다. 
예를 들어 1e9라고 입력하게 되면, 10의 9제곱이 됩니다.

유효숫자e지수 = 유효숫자 x 10^지수

지수 표현 방식은 임의의 큰 수를 표현하기 위해 자주 사용된다.
최단 경로 알고리즘에서는 도달할 수 없는 노드에 대해 최단 거리를 무한(INF)로 설정하곤 한다.
이때 가능한 최댓값이 10억 미만이라면 무한(INF)의 값으로 1e9를 이요할 수 있다.
'''

'''
오늘날 가장 널리 쓰이는 IEEE754 표준에서는 실수형을 저장하기 위해 4바이트, 혹은 8바이트의 고정된 크기의 메모리를 할당하므로, 컴퓨터 시스템은 실수 정보를 표현하는 정확도에 한계를 가진다.

예를 들어 10진수 체계에서는 0.3과 0.6을 더한 값이 0.9로 정확히 떨어진다.
 - 하지만 2진수에서는 0.9를 정확히 표현할 수 있는 방법이 없다.
 - 컴퓨터는 최대한 0.9와 가깝게 표현하지만, 미세한 오차가 발생한다.
'''

a = 0.3 + 0.6
print(a)	# 0.8999999999

if a == 0.9:
	print(True)
else:
	print(False)	#False

'''
이러한 표현상의 한계를 해결하기 위해
round() 함수를 이용할 수 있으며, 이러한 방법이 권장된다.
예를 들어 123.456을 소수 셋째 자리에서 반올림하려면
roumd(123.456, 2)라고 작성한다.
	- 그 결과는 123.46이 된다.
'''

a = 0.3 + 0.6
print(round(a, 4))	#0.9

if round(a, 4) == 0.9:
	print(True)
else:
	print(False)	# True


# 수 자료형의 연산
'''
수 자료형에 대해 사칙연산과 나머지 연산자가 많이 사용된다.
단 나누기 연산자(/)를 주의해서 사용해야하는데,
 - 파이선에서 나누기 연산자(/)는 나눠진 결과를 실수형으로 반환한다.
다양한 로직을 설계할 때 나머지 연산자(%)를 이용해야 할 때가 많다.
파이썬에서 몫을 얻기 위해 몫 연산자(//)를 사용한다.
이외에도 거듭 제곱 연산자(**)를 비롯한 다양한 연산자가 존재
'''

a = 7
b = 3

# 나누기
print(a / b)

# 나머지
print(a % b)

# 몫
print(a // b)
